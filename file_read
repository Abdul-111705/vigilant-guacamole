import re
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from nltk.stem import WordNetLemmatizer
from nltk.sentiment.vader import SentimentIntensityAnalyzer
import pandas as pd
import matplotlib.pyplot as plt
import nltk

# Read tweets from a CSV file
file_path = 'tweets.csv'
df_tweets = pd.read_csv(file_path, sep='\t', header=None, names=['ID', 'Game', 'Sentiment', 'Tweet'])

# Extract tweets from the DataFrame
tweets = df_tweets['Tweet'].tolist()

# Download NLTK resources (one-time step)
nltk.download('punkt')
nltk.download('stopwords')
nltk.download('wordnet')

# Preprocess tweet text
def preprocess_tweet(tweet):
    # Remove URLs, special characters, and numbers
    tweet = re.sub(r'http\S+|www\S+|https\S+', '', str(tweet), flags=re.MULTILINE)
    tweet = re.sub(r'\W', ' ', str(tweet))
    tweet = re.sub(r'\d+', '', str(tweet))

    # Convert to lowercase
    tweet = tweet.lower()

    # Tokenization and stopword removal
    stop_words = set(stopwords.words('english'))
    words = word_tokenize(tweet)
    words = [word for word in words if word not in stop_words]

    # Lemmatization
    lemmatizer = WordNetLemmatizer()
    words = [lemmatizer.lemmatize(word) for word in words]

    return ' '.join(words)

# Preprocess all collected tweets
preprocessed_tweets = [preprocess_tweet(tweet) for tweet in tweets]

# Initialize the VADER sentiment analyzer
sid = SentimentIntensityAnalyzer()

# Perform sentiment analysis
sentiment_scores = [sid.polarity_scores(tweet) for tweet in preprocessed_tweets]

# Create a DataFrame for the sentiment scores
df_sentiment = pd.DataFrame(sentiment_scores)

# Classify each tweet as positive, negative, or neutral
def classify_sentiment(compound):
    if compound >= 0.05:
        return 'Positive'
    elif compound <= -0.05:
        return 'Negative'
    else:
        return 'Neutral'

df_sentiment['Sentiment'] = df_sentiment['compound'].apply(classify_sentiment)

# Display the DataFrame with sentiment analysis results
df_results = pd.concat([df_tweets, df_sentiment['Sentiment']], axis=1)
print(df_results)

# Plot the sentiment distribution
sentiment_distribution = df_sentiment['Sentiment'].value_counts()
plt.bar(sentiment_distribution.index, sentiment_distribution.values, color=['green', 'red', 'blue'])
plt.xlabel('Sentiment')
plt.ylabel('Count')
plt.title('Sentiment Analysis of Tweets')
plt.show()
